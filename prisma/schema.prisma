generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(cuid())
  login                 String?                @unique
  email                 String?                @unique
  name                  String?
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  contracts             Contract[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Placement {
  id   String @id @default(cuid())
  name String @unique

  contract Contract[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Type {
  id   String @id @default(cuid())
  name String @unique

  contract Contract[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Federal {
  id   String @id @default(cuid())
  name String @unique

  contract Contract[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model View {
  id   String @id @default(cuid())
  name String @unique

  contract Contract[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Article {
  id   String @id @default(cuid())
  name String @unique

  contract Contract[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Division {
  id   String @id @default(cuid())
  name String @unique

  contract Contract[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Contract {
  id String @id @default(cuid())

  placementId String?
  placement   Placement? @relation(fields: [placementId], references: [id], onDelete: Cascade)

  typeId String?
  type   Type?   @relation(fields: [typeId], references: [id], onDelete: Cascade)

  federalId String?
  federal   Federal? @relation(fields: [federalId], references: [id], onDelete: Cascade)

  contractNumber           String
  startDateOfTheAgreement  String
  endDateOfTheContract     String?
  provider                 String
  contractColor            String?
  theSubjectOfTheAgreement String
  theAmountOfTheContract   String?
  returnDate               String?
  theAmountOfCollateral    String?
  pdfFile                  String?

  paid Paid[]

  viewId String
  view   View   @relation(fields: [viewId], references: [id], onDelete: Cascade)

  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  divisionId String
  division   Division @relation(fields: [divisionId], references: [id], onDelete: Cascade)

  sourceOfFinancing     String?
  additionalInformation String? @db.Text
  MP                    Boolean @default(false)
  subcontractorMP       Boolean @default(false)
  transients            Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Paid {
  id String @id @default(cuid())

  amount String?

  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
