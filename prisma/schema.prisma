generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(cuid())
  login                 String?                @unique
  email                 String?                @unique
  name                  String?
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Placement {
  id String @id @default(cuid())

  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Type {
  id String @id @default(cuid())

  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Federal {
  id String @id @default(cuid())

  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model View {
  id String @id @default(cuid())

  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Article {
  id String @id @default(cuid())

  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Division {
  id String @id @default(cuid())

  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Provider {
  id String @id @default(cuid())

  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Contract {
  id String @id @default(cuid())

  placement                String
  type                     String
  federal                  String
  contractNumber           String
  startDateOfTheAgreement  String
  endDateOfTheContract     String?
  provider                 String
  contractColor            String?
  theSubjectOfTheAgreement String
  theAmountOfTheContract   String?
  thePostagePeriod         String?
  point                    String?
  subItem                  String?
  returnDate               String?
  theAmountOfCollateral    String?
  pdfFile                  String?
  view                     String
  article                  String
  division                 String
  sourceOfFinancing        String?
  additionalInformation    String? @db.Text
  MP                       Boolean @default(false)
  subcontractorMP          Boolean @default(false)
  transients               Boolean @default(false)
  micro                    Boolean @default(false)
  small                    Boolean @default(false)
  average                  Boolean @default(false)
  user                     String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Paid {
  id String @id @default(cuid())

  amount                  String?
  paymentRegistrationDate DateTime?
  paymentOrderNumber      String?
  contract                String
  division                String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
